rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function accountBelongsToCaller(uid) {
        return request.auth != null && request.auth.uid == uid;
    }

    function getRoles() {
        return get(/databases/$(database)/documents/accounts/$(request.auth.uid)).data.roles;
    }

    function hasAllOfRoles(roles) {
        return isAuthenticated() && getRoles().hasAll(keys)
    }

    function hasAnyOFRoles(roles) {
        return isAuthenticated() && getRoles().hasAny(keys)
    }

    function disallowModifyingAccountExceptRoles() {
        return !(resource.data.keys().length === 1 && ("roles" in resource.data.keys()));
    }

    function allowRoleManagementOnly(manager, roles) {
        return hasRoles([manager]) && disallowModifyingAccountExceptRoles() && roles.hasAll(resource.data.roles);
    }

    function disallowSelfRolesManagement() {
        return !("roles" in resource.data.keys());
    }

    function allowCreateAccountWithEmptyRoles(uid) {
        return accountBelongsToCaller(uid) && ("roles" in resource.data.keys()) && resource.data.roles.length == 0;
    }

    match /accounts/{uid} {
        allow read if: accountBelongsToCaller(uid);
        allow create if: allowCreateAccountWithEmptyRoles(uid);
        allow update, delete, read if: 
                (accountBelongsToCaller(uid) && disallowSelfRolesManagement())
             || allowRoleManagementOnly("role_manager", [ "author" ])
             || allowRoleManagementOnly("admin", [ "author", "role_manager" ]);
    }

    match /posts/{post} {
        allow read: if true;
        allow write: if isAuthenticated() && hasAnyOFRoles(["author"]);
    }
}
